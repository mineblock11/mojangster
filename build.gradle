buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

group = 'dev.ithundxr.mods'
version = '4.2.0-1.19'

java {
    archivesBaseName = 'mojangster'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    mappings channel: 'parchment', version: '2022.08.10-1.19.2'
    //mappings channel: 'official', version: '1.19'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=mojangster.mixins.json"

            mods {
                mojangster {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=mojangster.mixins.json"

            mods {
                mojangster {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'mojangster', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                mojangster {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "mojangster.refmap.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url "https://maven.shedaniel.me/" }
}

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19-41.1.0'
    runtimeOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:8.0.75")
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:8.0.75")
    annotationProcessor 'org.spongepowered:mixin:0.8:processor'
}
jar {
    manifest {
        attributes([
                "Specification-Title"     : "mojangster",
                //"Specification-Vendor": "mojangster authors",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                //"Implementation-Vendor": "mojangster authors",
                "MixinConfigs"            : "mojangster.mixins.json",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

jar.finalizedBy('reobfJar')
